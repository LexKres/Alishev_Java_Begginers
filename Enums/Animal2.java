package Enums;


// В перечислении можно создать конструктор


public enum Animal2 {
    CAT("Кошка"), DOG("Собака"), FROG("Лягушка");
    // т.е. это если бы мы писали так:  new DOG("Собака")

    private String translation;   //  можем в перечислении создать поля

    // если мы создадим свой конструктор с параметром, то конструктор по умолчанию потребуется в Enum прописать руками явно
    // т.к. теперь Java не сможет сама автоматически создавать объекты-перечисления, указанные в Enum, потому что
    // мы ввели конструктор с параметром, а где Java должна взять его значение при автоматическом создании объектов?
    // Поэтому дописываем конструктор по умолчанию руками, чтобы можно было создавать объекты, если параметр не будет
    // Это если перечисления указать без параметров как: CAT, DOG, FROG;
    // Но теперь мы можем указать элементы перечисления с параметром (у нас есть конструктор с параметром)
    // указан


    //  слово private в Enum является избыточным
    Animal2() {

    }

    // обычно конструктор делается private, потому что нам не требуется создавать объекты класса Enum все этого класса
    //  слово private избыточное , но я его оставлю как демонстрацию
    private Animal2 (String translation) {
        this.translation = translation;
    }

    public String getTranslation() { return translation; }

    // переопределение метода toString()
    public String toString() {
        return super.toString() + " переводится на русский язык как " + getTranslation();
    }
}

